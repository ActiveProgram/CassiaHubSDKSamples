//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./2b_types');
//HELPER FUNCTIONS AND STRUCTURES

NotificationService_userChallenge_args = function(args) {
};
NotificationService_userChallenge_args.prototype = {};
NotificationService_userChallenge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_userChallenge_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_userChallenge_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_userChallenge_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
NotificationService_userChallenge_result.prototype = {};
NotificationService_userChallenge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AuthInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_userChallenge_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_userChallenge_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onConnectionStateChange_args = function(args) {
  this.chipId = null;
  this.deviceId = null;
  this.status = null;
  if (args) {
    if (args.chipId !== undefined) {
      this.chipId = args.chipId;
    }
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
NotificationService_onConnectionStateChange_args.prototype = {};
NotificationService_onConnectionStateChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onConnectionStateChange_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onConnectionStateChange_args');
  if (this.chipId !== null && this.chipId !== undefined) {
    output.writeFieldBegin('chipId', Thrift.Type.STRING, 1);
    output.writeString(this.chipId);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 2);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onConnectionStateChange_result = function(args) {
};
NotificationService_onConnectionStateChange_result.prototype = {};
NotificationService_onConnectionStateChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onConnectionStateChange_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onConnectionStateChange_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onScan_args = function(args) {
  this.chipId = null;
  this.device = null;
  this.hexScanRecord = null;
  this.rssi = null;
  if (args) {
    if (args.chipId !== undefined) {
      this.chipId = args.chipId;
    }
    if (args.device !== undefined) {
      this.device = args.device;
    }
    if (args.hexScanRecord !== undefined) {
      this.hexScanRecord = args.hexScanRecord;
    }
    if (args.rssi !== undefined) {
      this.rssi = args.rssi;
    }
  }
};
NotificationService_onScan_args.prototype = {};
NotificationService_onScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.device = new ttypes.Device();
        this.device.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hexScanRecord = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rssi = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onScan_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onScan_args');
  if (this.chipId !== null && this.chipId !== undefined) {
    output.writeFieldBegin('chipId', Thrift.Type.STRING, 1);
    output.writeString(this.chipId);
    output.writeFieldEnd();
  }
  if (this.device !== null && this.device !== undefined) {
    output.writeFieldBegin('device', Thrift.Type.STRUCT, 2);
    this.device.write(output);
    output.writeFieldEnd();
  }
  if (this.hexScanRecord !== null && this.hexScanRecord !== undefined) {
    output.writeFieldBegin('hexScanRecord', Thrift.Type.STRING, 3);
    output.writeString(this.hexScanRecord);
    output.writeFieldEnd();
  }
  if (this.rssi !== null && this.rssi !== undefined) {
    output.writeFieldBegin('rssi', Thrift.Type.I32, 4);
    output.writeI32(this.rssi);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onScan_result = function(args) {
};
NotificationService_onScan_result.prototype = {};
NotificationService_onScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onScan_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onScan_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onServicesDiscovered_args = function(args) {
  this.deviceId = null;
  this.s = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.s !== undefined) {
      this.s = args.s;
    }
  }
};
NotificationService_onServicesDiscovered_args.prototype = {};
NotificationService_onServicesDiscovered_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.s = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.GattService();
          elem30.read(input);
          this.s.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onServicesDiscovered_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onServicesDiscovered_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.s.length);
    for (var iter31 in this.s)
    {
      if (this.s.hasOwnProperty(iter31))
      {
        iter31 = this.s[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onServicesDiscovered_result = function(args) {
};
NotificationService_onServicesDiscovered_result.prototype = {};
NotificationService_onServicesDiscovered_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onServicesDiscovered_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onServicesDiscovered_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onNotify_args = function(args) {
  this.deviceId = null;
  this.handle = null;
  this.hexData = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.handle !== undefined) {
      this.handle = args.handle;
    }
    if (args.hexData !== undefined) {
      this.hexData = args.hexData;
    }
  }
};
NotificationService_onNotify_args.prototype = {};
NotificationService_onNotify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.handle = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hexData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onNotify_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onNotify_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I32, 2);
    output.writeI32(this.handle);
    output.writeFieldEnd();
  }
  if (this.hexData !== null && this.hexData !== undefined) {
    output.writeFieldBegin('hexData', Thrift.Type.STRING, 3);
    output.writeString(this.hexData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onNotify_result = function(args) {
};
NotificationService_onNotify_result.prototype = {};
NotificationService_onNotify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onNotify_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onNotify_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onReadByHandle_args = function(args) {
  this.deviceId = null;
  this.handle = null;
  this.hexData = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.handle !== undefined) {
      this.handle = args.handle;
    }
    if (args.hexData !== undefined) {
      this.hexData = args.hexData;
    }
  }
};
NotificationService_onReadByHandle_args.prototype = {};
NotificationService_onReadByHandle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.handle = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hexData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onReadByHandle_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onReadByHandle_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I32, 2);
    output.writeI32(this.handle);
    output.writeFieldEnd();
  }
  if (this.hexData !== null && this.hexData !== undefined) {
    output.writeFieldBegin('hexData', Thrift.Type.STRING, 3);
    output.writeString(this.hexData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onReadByHandle_result = function(args) {
};
NotificationService_onReadByHandle_result.prototype = {};
NotificationService_onReadByHandle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onReadByHandle_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onReadByHandle_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onMessage_args = function(args) {
  this.messageKey = null;
  this.params = null;
  if (args) {
    if (args.messageKey !== undefined) {
      this.messageKey = args.messageKey;
    }
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
NotificationService_onMessage_args.prototype = {};
NotificationService_onMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onMessage_args.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onMessage_args');
  if (this.messageKey !== null && this.messageKey !== undefined) {
    output.writeFieldBegin('messageKey', Thrift.Type.STRING, 1);
    output.writeString(this.messageKey);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 2);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationService_onMessage_result = function(args) {
};
NotificationService_onMessage_result.prototype = {};
NotificationService_onMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationService_onMessage_result.prototype.write = function(output) {
  output.writeStructBegin('NotificationService_onMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotificationServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
NotificationServiceClient.prototype = {};
NotificationServiceClient.prototype.seqid = function() { return this._seqid; }
NotificationServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
NotificationServiceClient.prototype.userChallenge = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_userChallenge();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_userChallenge();
  }
};

NotificationServiceClient.prototype.send_userChallenge = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('userChallenge', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_userChallenge_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_userChallenge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_userChallenge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('userChallenge failed: unknown result');
};
NotificationServiceClient.prototype.onConnectionStateChange = function(chipId, deviceId, status, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onConnectionStateChange(chipId, deviceId, status);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onConnectionStateChange(chipId, deviceId, status);
  }
};

NotificationServiceClient.prototype.send_onConnectionStateChange = function(chipId, deviceId, status) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onConnectionStateChange', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onConnectionStateChange_args();
  args.chipId = chipId;
  args.deviceId = deviceId;
  args.status = status;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onConnectionStateChange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onConnectionStateChange_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceClient.prototype.onScan = function(chipId, device, hexScanRecord, rssi, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onScan(chipId, device, hexScanRecord, rssi);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onScan(chipId, device, hexScanRecord, rssi);
  }
};

NotificationServiceClient.prototype.send_onScan = function(chipId, device, hexScanRecord, rssi) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onScan', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onScan_args();
  args.chipId = chipId;
  args.device = device;
  args.hexScanRecord = hexScanRecord;
  args.rssi = rssi;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onScan_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceClient.prototype.onServicesDiscovered = function(deviceId, s, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onServicesDiscovered(deviceId, s);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onServicesDiscovered(deviceId, s);
  }
};

NotificationServiceClient.prototype.send_onServicesDiscovered = function(deviceId, s) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onServicesDiscovered', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onServicesDiscovered_args();
  args.deviceId = deviceId;
  args.s = s;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onServicesDiscovered = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onServicesDiscovered_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceClient.prototype.onNotify = function(deviceId, handle, hexData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onNotify(deviceId, handle, hexData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onNotify(deviceId, handle, hexData);
  }
};

NotificationServiceClient.prototype.send_onNotify = function(deviceId, handle, hexData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onNotify', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onNotify_args();
  args.deviceId = deviceId;
  args.handle = handle;
  args.hexData = hexData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onNotify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onNotify_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceClient.prototype.onReadByHandle = function(deviceId, handle, hexData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onReadByHandle(deviceId, handle, hexData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onReadByHandle(deviceId, handle, hexData);
  }
};

NotificationServiceClient.prototype.send_onReadByHandle = function(deviceId, handle, hexData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onReadByHandle', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onReadByHandle_args();
  args.deviceId = deviceId;
  args.handle = handle;
  args.hexData = hexData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onReadByHandle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onReadByHandle_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceClient.prototype.onMessage = function(messageKey, params, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_onMessage(messageKey, params);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_onMessage(messageKey, params);
  }
};

NotificationServiceClient.prototype.send_onMessage = function(messageKey, params) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('onMessage', Thrift.MessageType.CALL, this.seqid());
  var args = new NotificationService_onMessage_args();
  args.messageKey = messageKey;
  args.params = params;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

NotificationServiceClient.prototype.recv_onMessage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new NotificationService_onMessage_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
NotificationServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
NotificationServiceProcessor.prototype.process = function(input, output,session) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output,session);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

NotificationServiceProcessor.prototype.process_userChallenge = function(seqid, input, output, session) {
  var args = new NotificationService_userChallenge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.userChallenge.length === 0) {
    Q.fcall(this._handler.userChallenge, session)
      .then(function(result) {
        var result = new NotificationService_userChallenge_result({success: result});
        output.writeMessageBegin("userChallenge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_userChallenge_result(err);
        output.writeMessageBegin("userChallenge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.userChallenge( session, function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("userChallenge", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_userChallenge_result((err != null ? err : {success: result}));

      output.writeMessageBegin("userChallenge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onConnectionStateChange = function(seqid, input, output, session) {
  var args = new NotificationService_onConnectionStateChange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onConnectionStateChange.length === 3) {
    Q.fcall(this._handler.onConnectionStateChange, session, args.chipId, args.deviceId, args.status)
      .then(function(result) {
        var result = new NotificationService_onConnectionStateChange_result({success: result});
        output.writeMessageBegin("onConnectionStateChange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onConnectionStateChange_result(err);
        output.writeMessageBegin("onConnectionStateChange", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onConnectionStateChange( session,args.chipId, args.deviceId, args.status,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onConnectionStateChange", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onConnectionStateChange_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onConnectionStateChange", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onScan = function(seqid, input, output, session) {
  var args = new NotificationService_onScan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onScan.length === 4) {
    Q.fcall(this._handler.onScan, session, args.chipId, args.device, args.hexScanRecord, args.rssi)
      .then(function(result) {
        var result = new NotificationService_onScan_result({success: result});
        output.writeMessageBegin("onScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onScan_result(err);
        output.writeMessageBegin("onScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onScan( session,args.chipId, args.device, args.hexScanRecord, args.rssi,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onScan", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onScan_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onScan", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onServicesDiscovered = function(seqid, input, output, session) {
  var args = new NotificationService_onServicesDiscovered_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onServicesDiscovered.length === 2) {
    Q.fcall(this._handler.onServicesDiscovered, session, args.deviceId, args.s)
      .then(function(result) {
        var result = new NotificationService_onServicesDiscovered_result({success: result});
        output.writeMessageBegin("onServicesDiscovered", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onServicesDiscovered_result(err);
        output.writeMessageBegin("onServicesDiscovered", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onServicesDiscovered( session,args.deviceId, args.s,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onServicesDiscovered", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onServicesDiscovered_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onServicesDiscovered", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onNotify = function(seqid, input, output, session) {
  var args = new NotificationService_onNotify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onNotify.length === 3) {
    Q.fcall(this._handler.onNotify, session, args.deviceId, args.handle, args.hexData)
      .then(function(result) {
        var result = new NotificationService_onNotify_result({success: result});
        output.writeMessageBegin("onNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onNotify_result(err);
        output.writeMessageBegin("onNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onNotify( session,args.deviceId, args.handle, args.hexData,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onNotify", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onNotify_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onNotify", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onReadByHandle = function(seqid, input, output, session) {
  var args = new NotificationService_onReadByHandle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onReadByHandle.length === 3) {
    Q.fcall(this._handler.onReadByHandle, session, args.deviceId, args.handle, args.hexData)
      .then(function(result) {
        var result = new NotificationService_onReadByHandle_result({success: result});
        output.writeMessageBegin("onReadByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onReadByHandle_result(err);
        output.writeMessageBegin("onReadByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onReadByHandle( session,args.deviceId, args.handle, args.hexData,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onReadByHandle", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onReadByHandle_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onReadByHandle", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

NotificationServiceProcessor.prototype.process_onMessage = function(seqid, input, output, session) {
  var args = new NotificationService_onMessage_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.onMessage.length === 2) {
    Q.fcall(this._handler.onMessage, session, args.messageKey, args.params)
      .then(function(result) {
        var result = new NotificationService_onMessage_result({success: result});
        output.writeMessageBegin("onMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new NotificationService_onMessage_result(err);
        output.writeMessageBegin("onMessage", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.onMessage( session,args.messageKey, args.params,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("onMessage", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new NotificationService_onMessage_result((err != null ? err : {success: result}));

      output.writeMessageBegin("onMessage", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

