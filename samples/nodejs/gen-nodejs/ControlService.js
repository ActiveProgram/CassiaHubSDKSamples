//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./2b_types');
//HELPER FUNCTIONS AND STRUCTURES

ControlService_setupNotify_args = function(args) {
  this.ip = null;
  this.port = null;
  if (args) {
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
ControlService_setupNotify_args.prototype = {};
ControlService_setupNotify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_setupNotify_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_setupNotify_args');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_setupNotify_result = function(args) {
};
ControlService_setupNotify_result.prototype = {};
ControlService_setupNotify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_setupNotify_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_setupNotify_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_startScan_args = function(args) {
  this.chipId = null;
  this.seconds = null;
  if (args) {
    if (args.chipId !== undefined) {
      this.chipId = args.chipId;
    }
    if (args.seconds !== undefined) {
      this.seconds = args.seconds;
    }
  }
};
ControlService_startScan_args.prototype = {};
ControlService_startScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.seconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_startScan_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_startScan_args');
  if (this.chipId !== null && this.chipId !== undefined) {
    output.writeFieldBegin('chipId', Thrift.Type.STRING, 1);
    output.writeString(this.chipId);
    output.writeFieldEnd();
  }
  if (this.seconds !== null && this.seconds !== undefined) {
    output.writeFieldBegin('seconds', Thrift.Type.I32, 2);
    output.writeI32(this.seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_startScan_result = function(args) {
};
ControlService_startScan_result.prototype = {};
ControlService_startScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_startScan_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_startScan_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_stopScan_args = function(args) {
  this.chipId = null;
  if (args) {
    if (args.chipId !== undefined) {
      this.chipId = args.chipId;
    }
  }
};
ControlService_stopScan_args.prototype = {};
ControlService_stopScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_stopScan_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_stopScan_args');
  if (this.chipId !== null && this.chipId !== undefined) {
    output.writeFieldBegin('chipId', Thrift.Type.STRING, 1);
    output.writeString(this.chipId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_stopScan_result = function(args) {
};
ControlService_stopScan_result.prototype = {};
ControlService_stopScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_stopScan_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_stopScan_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_connect_args = function(args) {
  this.chipId = null;
  this.deviceId = null;
  this.type = null;
  if (args) {
    if (args.chipId !== undefined) {
      this.chipId = args.chipId;
    }
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
ControlService_connect_args.prototype = {};
ControlService_connect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chipId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_connect_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_connect_args');
  if (this.chipId !== null && this.chipId !== undefined) {
    output.writeFieldBegin('chipId', Thrift.Type.STRING, 1);
    output.writeString(this.chipId);
    output.writeFieldEnd();
  }
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 2);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_connect_result = function(args) {
};
ControlService_connect_result.prototype = {};
ControlService_connect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_connect_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_connect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_disconnect_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
  }
};
ControlService_disconnect_args.prototype = {};
ControlService_disconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_disconnect_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_disconnect_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_disconnect_result = function(args) {
};
ControlService_disconnect_result.prototype = {};
ControlService_disconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_disconnect_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_disconnect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_getConnectedDevices_args = function(args) {
};
ControlService_getConnectedDevices_args.prototype = {};
ControlService_getConnectedDevices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_getConnectedDevices_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_getConnectedDevices_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_getConnectedDevices_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ControlService_getConnectedDevices_result.prototype = {};
ControlService_getConnectedDevices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Device();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_getConnectedDevices_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_getConnectedDevices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_discoverServices_args = function(args) {
  this.deviceId = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
  }
};
ControlService_discoverServices_args.prototype = {};
ControlService_discoverServices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_discoverServices_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_discoverServices_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_discoverServices_result = function(args) {
};
ControlService_discoverServices_result.prototype = {};
ControlService_discoverServices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_discoverServices_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_discoverServices_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_writeByHandle_args = function(args) {
  this.deviceId = null;
  this.handle = null;
  this.hexData = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.handle !== undefined) {
      this.handle = args.handle;
    }
    if (args.hexData !== undefined) {
      this.hexData = args.hexData;
    }
  }
};
ControlService_writeByHandle_args.prototype = {};
ControlService_writeByHandle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.handle = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hexData = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_writeByHandle_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_writeByHandle_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I32, 2);
    output.writeI32(this.handle);
    output.writeFieldEnd();
  }
  if (this.hexData !== null && this.hexData !== undefined) {
    output.writeFieldBegin('hexData', Thrift.Type.STRING, 3);
    output.writeString(this.hexData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_writeByHandle_result = function(args) {
};
ControlService_writeByHandle_result.prototype = {};
ControlService_writeByHandle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_writeByHandle_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_writeByHandle_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_readByHandle_args = function(args) {
  this.deviceId = null;
  this.handle = null;
  if (args) {
    if (args.deviceId !== undefined) {
      this.deviceId = args.deviceId;
    }
    if (args.handle !== undefined) {
      this.handle = args.handle;
    }
  }
};
ControlService_readByHandle_args.prototype = {};
ControlService_readByHandle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.handle = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_readByHandle_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_readByHandle_args');
  if (this.deviceId !== null && this.deviceId !== undefined) {
    output.writeFieldBegin('deviceId', Thrift.Type.STRING, 1);
    output.writeString(this.deviceId);
    output.writeFieldEnd();
  }
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.I32, 2);
    output.writeI32(this.handle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_readByHandle_result = function(args) {
};
ControlService_readByHandle_result.prototype = {};
ControlService_readByHandle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_readByHandle_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_readByHandle_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_heartbeat_args = function(args) {
};
ControlService_heartbeat_args.prototype = {};
ControlService_heartbeat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_heartbeat_args.prototype.write = function(output) {
  output.writeStructBegin('ControlService_heartbeat_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlService_heartbeat_result = function(args) {
};
ControlService_heartbeat_result.prototype = {};
ControlService_heartbeat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControlService_heartbeat_result.prototype.write = function(output) {
  output.writeStructBegin('ControlService_heartbeat_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControlServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ControlServiceClient.prototype = {};
ControlServiceClient.prototype.seqid = function() { return this._seqid; }
ControlServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ControlServiceClient.prototype.setupNotify = function(ip, port, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setupNotify(ip, port);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setupNotify(ip, port);
  }
};

ControlServiceClient.prototype.send_setupNotify = function(ip, port) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setupNotify', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_setupNotify_args();
  args.ip = ip;
  args.port = port;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_setupNotify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_setupNotify_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.startScan = function(chipId, seconds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startScan(chipId, seconds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startScan(chipId, seconds);
  }
};

ControlServiceClient.prototype.send_startScan = function(chipId, seconds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startScan', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_startScan_args();
  args.chipId = chipId;
  args.seconds = seconds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_startScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_startScan_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.stopScan = function(chipId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopScan(chipId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopScan(chipId);
  }
};

ControlServiceClient.prototype.send_stopScan = function(chipId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stopScan', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_stopScan_args();
  args.chipId = chipId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_stopScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_stopScan_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.connect = function(chipId, deviceId, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_connect(chipId, deviceId, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_connect(chipId, deviceId, type);
  }
};

ControlServiceClient.prototype.send_connect = function(chipId, deviceId, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('connect', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_connect_args();
  args.chipId = chipId;
  args.deviceId = deviceId;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_connect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_connect_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.disconnect = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disconnect(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disconnect(deviceId);
  }
};

ControlServiceClient.prototype.send_disconnect = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disconnect', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_disconnect_args();
  args.deviceId = deviceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_disconnect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_disconnect_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.getConnectedDevices = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getConnectedDevices();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getConnectedDevices();
  }
};

ControlServiceClient.prototype.send_getConnectedDevices = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getConnectedDevices', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_getConnectedDevices_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_getConnectedDevices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_getConnectedDevices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getConnectedDevices failed: unknown result');
};
ControlServiceClient.prototype.discoverServices = function(deviceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_discoverServices(deviceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_discoverServices(deviceId);
  }
};

ControlServiceClient.prototype.send_discoverServices = function(deviceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('discoverServices', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_discoverServices_args();
  args.deviceId = deviceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_discoverServices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_discoverServices_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.writeByHandle = function(deviceId, handle, hexData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeByHandle(deviceId, handle, hexData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeByHandle(deviceId, handle, hexData);
  }
};

ControlServiceClient.prototype.send_writeByHandle = function(deviceId, handle, hexData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeByHandle', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_writeByHandle_args();
  args.deviceId = deviceId;
  args.handle = handle;
  args.hexData = hexData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_writeByHandle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_writeByHandle_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.readByHandle = function(deviceId, handle, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readByHandle(deviceId, handle);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readByHandle(deviceId, handle);
  }
};

ControlServiceClient.prototype.send_readByHandle = function(deviceId, handle) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readByHandle', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_readByHandle_args();
  args.deviceId = deviceId;
  args.handle = handle;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_readByHandle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_readByHandle_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceClient.prototype.heartbeat = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_heartbeat();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_heartbeat();
  }
};

ControlServiceClient.prototype.send_heartbeat = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('heartbeat', Thrift.MessageType.CALL, this.seqid());
  var args = new ControlService_heartbeat_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControlServiceClient.prototype.recv_heartbeat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControlService_heartbeat_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ControlServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ControlServiceProcessor.prototype.process = function(input, output,session) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output,session);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ControlServiceProcessor.prototype.process_setupNotify = function(seqid, input, output, session) {
  var args = new ControlService_setupNotify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setupNotify.length === 2) {
    Q.fcall(this._handler.setupNotify, session, args.ip, args.port)
      .then(function(result) {
        var result = new ControlService_setupNotify_result({success: result});
        output.writeMessageBegin("setupNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_setupNotify_result(err);
        output.writeMessageBegin("setupNotify", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setupNotify( session,args.ip, args.port,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("setupNotify", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_setupNotify_result((err != null ? err : {success: result}));

      output.writeMessageBegin("setupNotify", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_startScan = function(seqid, input, output, session) {
  var args = new ControlService_startScan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startScan.length === 2) {
    Q.fcall(this._handler.startScan, session, args.chipId, args.seconds)
      .then(function(result) {
        var result = new ControlService_startScan_result({success: result});
        output.writeMessageBegin("startScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_startScan_result(err);
        output.writeMessageBegin("startScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.startScan( session,args.chipId, args.seconds,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("startScan", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_startScan_result((err != null ? err : {success: result}));

      output.writeMessageBegin("startScan", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_stopScan = function(seqid, input, output, session) {
  var args = new ControlService_stopScan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopScan.length === 1) {
    Q.fcall(this._handler.stopScan, session, args.chipId)
      .then(function(result) {
        var result = new ControlService_stopScan_result({success: result});
        output.writeMessageBegin("stopScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_stopScan_result(err);
        output.writeMessageBegin("stopScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stopScan( session,args.chipId,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("stopScan", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_stopScan_result((err != null ? err : {success: result}));

      output.writeMessageBegin("stopScan", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_connect = function(seqid, input, output, session) {
  var args = new ControlService_connect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.connect.length === 3) {
    Q.fcall(this._handler.connect, session, args.chipId, args.deviceId, args.type)
      .then(function(result) {
        var result = new ControlService_connect_result({success: result});
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_connect_result(err);
        output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.connect( session,args.chipId, args.deviceId, args.type,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("connect", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_connect_result((err != null ? err : {success: result}));

      output.writeMessageBegin("connect", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_disconnect = function(seqid, input, output, session) {
  var args = new ControlService_disconnect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disconnect.length === 1) {
    Q.fcall(this._handler.disconnect, session, args.deviceId)
      .then(function(result) {
        var result = new ControlService_disconnect_result({success: result});
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_disconnect_result(err);
        output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disconnect( session,args.deviceId,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("disconnect", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_disconnect_result((err != null ? err : {success: result}));

      output.writeMessageBegin("disconnect", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_getConnectedDevices = function(seqid, input, output, session) {
  var args = new ControlService_getConnectedDevices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getConnectedDevices.length === 0) {
    Q.fcall(this._handler.getConnectedDevices, session)
      .then(function(result) {
        var result = new ControlService_getConnectedDevices_result({success: result});
        output.writeMessageBegin("getConnectedDevices", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_getConnectedDevices_result(err);
        output.writeMessageBegin("getConnectedDevices", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getConnectedDevices( session, function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("getConnectedDevices", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_getConnectedDevices_result((err != null ? err : {success: result}));

      output.writeMessageBegin("getConnectedDevices", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_discoverServices = function(seqid, input, output, session) {
  var args = new ControlService_discoverServices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.discoverServices.length === 1) {
    Q.fcall(this._handler.discoverServices, session, args.deviceId)
      .then(function(result) {
        var result = new ControlService_discoverServices_result({success: result});
        output.writeMessageBegin("discoverServices", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_discoverServices_result(err);
        output.writeMessageBegin("discoverServices", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.discoverServices( session,args.deviceId,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("discoverServices", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_discoverServices_result((err != null ? err : {success: result}));

      output.writeMessageBegin("discoverServices", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_writeByHandle = function(seqid, input, output, session) {
  var args = new ControlService_writeByHandle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeByHandle.length === 3) {
    Q.fcall(this._handler.writeByHandle, session, args.deviceId, args.handle, args.hexData)
      .then(function(result) {
        var result = new ControlService_writeByHandle_result({success: result});
        output.writeMessageBegin("writeByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_writeByHandle_result(err);
        output.writeMessageBegin("writeByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeByHandle( session,args.deviceId, args.handle, args.hexData,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("writeByHandle", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_writeByHandle_result((err != null ? err : {success: result}));

      output.writeMessageBegin("writeByHandle", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_readByHandle = function(seqid, input, output, session) {
  var args = new ControlService_readByHandle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readByHandle.length === 2) {
    Q.fcall(this._handler.readByHandle, session, args.deviceId, args.handle)
      .then(function(result) {
        var result = new ControlService_readByHandle_result({success: result});
        output.writeMessageBegin("readByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_readByHandle_result(err);
        output.writeMessageBegin("readByHandle", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readByHandle( session,args.deviceId, args.handle,  function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("readByHandle", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_readByHandle_result((err != null ? err : {success: result}));

      output.writeMessageBegin("readByHandle", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ControlServiceProcessor.prototype.process_heartbeat = function(seqid, input, output, session) {
  var args = new ControlService_heartbeat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.heartbeat.length === 0) {
    Q.fcall(this._handler.heartbeat, session)
      .then(function(result) {
        var result = new ControlService_heartbeat_result({success: result});
        output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ControlService_heartbeat_result(err);
        output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.heartbeat( session, function (err, result) {
if(err) {
var x = new Thrift.TApplicationException(null, err.message || err);
x.message = err.message || err;
output.writeMessageBegin("heartbeat", Thrift.MessageType.EXCEPTION, seqid);
x.write(output);
output.writeMessageEnd();
output.flush();
return;
};      var result = new ControlService_heartbeat_result((err != null ? err : {success: result}));

      output.writeMessageBegin("heartbeat", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

