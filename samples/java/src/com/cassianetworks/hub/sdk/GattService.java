/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cassianetworks.hub.sdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-10")
public class GattService implements org.apache.thrift.TBase<GattService, GattService._Fields>, java.io.Serializable, Cloneable, Comparable<GattService> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GattService");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("startHandle", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField END_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("endHandle", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CHARS_FIELD_DESC = new org.apache.thrift.protocol.TField("chars", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GattServiceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GattServiceTupleSchemeFactory());
  }

  public String uuid; // required
  public String desc; // required
  public int startHandle; // required
  public int endHandle; // required
  public List<Characteristic> chars; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    DESC((short)2, "desc"),
    START_HANDLE((short)3, "startHandle"),
    END_HANDLE((short)4, "endHandle"),
    CHARS((short)5, "chars");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // DESC
          return DESC;
        case 3: // START_HANDLE
          return START_HANDLE;
        case 4: // END_HANDLE
          return END_HANDLE;
        case 5: // CHARS
          return CHARS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTHANDLE_ISSET_ID = 0;
  private static final int __ENDHANDLE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("startHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("endHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHARS, new org.apache.thrift.meta_data.FieldMetaData("chars", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Characteristic"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GattService.class, metaDataMap);
  }

  public GattService() {
  }

  public GattService(
    String uuid,
    String desc,
    int startHandle,
    int endHandle,
    List<Characteristic> chars)
  {
    this();
    this.uuid = uuid;
    this.desc = desc;
    this.startHandle = startHandle;
    setStartHandleIsSet(true);
    this.endHandle = endHandle;
    setEndHandleIsSet(true);
    this.chars = chars;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GattService(GattService other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.startHandle = other.startHandle;
    this.endHandle = other.endHandle;
    if (other.isSetChars()) {
      List<Characteristic> __this__chars = new ArrayList<Characteristic>(other.chars.size());
      for (Characteristic other_element : other.chars) {
        __this__chars.add(other_element);
      }
      this.chars = __this__chars;
    }
  }

  public GattService deepCopy() {
    return new GattService(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.desc = null;
    setStartHandleIsSet(false);
    this.startHandle = 0;
    setEndHandleIsSet(false);
    this.endHandle = 0;
    this.chars = null;
  }

  public String getUuid() {
    return this.uuid;
  }

  public GattService setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public GattService setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getStartHandle() {
    return this.startHandle;
  }

  public GattService setStartHandle(int startHandle) {
    this.startHandle = startHandle;
    setStartHandleIsSet(true);
    return this;
  }

  public void unsetStartHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTHANDLE_ISSET_ID);
  }

  /** Returns true if field startHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetStartHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTHANDLE_ISSET_ID);
  }

  public void setStartHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTHANDLE_ISSET_ID, value);
  }

  public int getEndHandle() {
    return this.endHandle;
  }

  public GattService setEndHandle(int endHandle) {
    this.endHandle = endHandle;
    setEndHandleIsSet(true);
    return this;
  }

  public void unsetEndHandle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDHANDLE_ISSET_ID);
  }

  /** Returns true if field endHandle is set (has been assigned a value) and false otherwise */
  public boolean isSetEndHandle() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDHANDLE_ISSET_ID);
  }

  public void setEndHandleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDHANDLE_ISSET_ID, value);
  }

  public int getCharsSize() {
    return (this.chars == null) ? 0 : this.chars.size();
  }

  public java.util.Iterator<Characteristic> getCharsIterator() {
    return (this.chars == null) ? null : this.chars.iterator();
  }

  public void addToChars(Characteristic elem) {
    if (this.chars == null) {
      this.chars = new ArrayList<Characteristic>();
    }
    this.chars.add(elem);
  }

  public List<Characteristic> getChars() {
    return this.chars;
  }

  public GattService setChars(List<Characteristic> chars) {
    this.chars = chars;
    return this;
  }

  public void unsetChars() {
    this.chars = null;
  }

  /** Returns true if field chars is set (has been assigned a value) and false otherwise */
  public boolean isSetChars() {
    return this.chars != null;
  }

  public void setCharsIsSet(boolean value) {
    if (!value) {
      this.chars = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case START_HANDLE:
      if (value == null) {
        unsetStartHandle();
      } else {
        setStartHandle((Integer)value);
      }
      break;

    case END_HANDLE:
      if (value == null) {
        unsetEndHandle();
      } else {
        setEndHandle((Integer)value);
      }
      break;

    case CHARS:
      if (value == null) {
        unsetChars();
      } else {
        setChars((List<Characteristic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case DESC:
      return getDesc();

    case START_HANDLE:
      return getStartHandle();

    case END_HANDLE:
      return getEndHandle();

    case CHARS:
      return getChars();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case DESC:
      return isSetDesc();
    case START_HANDLE:
      return isSetStartHandle();
    case END_HANDLE:
      return isSetEndHandle();
    case CHARS:
      return isSetChars();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GattService)
      return this.equals((GattService)that);
    return false;
  }

  public boolean equals(GattService that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_startHandle = true;
    boolean that_present_startHandle = true;
    if (this_present_startHandle || that_present_startHandle) {
      if (!(this_present_startHandle && that_present_startHandle))
        return false;
      if (this.startHandle != that.startHandle)
        return false;
    }

    boolean this_present_endHandle = true;
    boolean that_present_endHandle = true;
    if (this_present_endHandle || that_present_endHandle) {
      if (!(this_present_endHandle && that_present_endHandle))
        return false;
      if (this.endHandle != that.endHandle)
        return false;
    }

    boolean this_present_chars = true && this.isSetChars();
    boolean that_present_chars = true && that.isSetChars();
    if (this_present_chars || that_present_chars) {
      if (!(this_present_chars && that_present_chars))
        return false;
      if (!this.chars.equals(that.chars))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_startHandle = true;
    list.add(present_startHandle);
    if (present_startHandle)
      list.add(startHandle);

    boolean present_endHandle = true;
    list.add(present_endHandle);
    if (present_endHandle)
      list.add(endHandle);

    boolean present_chars = true && (isSetChars());
    list.add(present_chars);
    if (present_chars)
      list.add(chars);

    return list.hashCode();
  }

  @Override
  public int compareTo(GattService other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartHandle()).compareTo(other.isSetStartHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startHandle, other.startHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndHandle()).compareTo(other.isSetEndHandle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndHandle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endHandle, other.endHandle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChars()).compareTo(other.isSetChars());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChars()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chars, other.chars);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GattService(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startHandle:");
    sb.append(this.startHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endHandle:");
    sb.append(this.endHandle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chars:");
    if (this.chars == null) {
      sb.append("null");
    } else {
      sb.append(this.chars);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GattServiceStandardSchemeFactory implements SchemeFactory {
    public GattServiceStandardScheme getScheme() {
      return new GattServiceStandardScheme();
    }
  }

  private static class GattServiceStandardScheme extends StandardScheme<GattService> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GattService struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startHandle = iprot.readI32();
              struct.setStartHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_HANDLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endHandle = iprot.readI32();
              struct.setEndHandleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHARS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.chars = new ArrayList<Characteristic>(_list0.size);
                Characteristic _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Characteristic();
                  _elem1.read(iprot);
                  struct.chars.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCharsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GattService struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.startHandle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_HANDLE_FIELD_DESC);
      oprot.writeI32(struct.endHandle);
      oprot.writeFieldEnd();
      if (struct.chars != null) {
        oprot.writeFieldBegin(CHARS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chars.size()));
          for (Characteristic _iter3 : struct.chars)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GattServiceTupleSchemeFactory implements SchemeFactory {
    public GattServiceTupleScheme getScheme() {
      return new GattServiceTupleScheme();
    }
  }

  private static class GattServiceTupleScheme extends TupleScheme<GattService> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GattService struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetStartHandle()) {
        optionals.set(2);
      }
      if (struct.isSetEndHandle()) {
        optionals.set(3);
      }
      if (struct.isSetChars()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetStartHandle()) {
        oprot.writeI32(struct.startHandle);
      }
      if (struct.isSetEndHandle()) {
        oprot.writeI32(struct.endHandle);
      }
      if (struct.isSetChars()) {
        {
          oprot.writeI32(struct.chars.size());
          for (Characteristic _iter4 : struct.chars)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GattService struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startHandle = iprot.readI32();
        struct.setStartHandleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endHandle = iprot.readI32();
        struct.setEndHandleIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.chars = new ArrayList<Characteristic>(_list5.size);
          Characteristic _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Characteristic();
            _elem6.read(iprot);
            struct.chars.add(_elem6);
          }
        }
        struct.setCharsIsSet(true);
      }
    }
  }

}

