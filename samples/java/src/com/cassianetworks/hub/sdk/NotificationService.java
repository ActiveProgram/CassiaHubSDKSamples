/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cassianetworks.hub.sdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-10")
public class NotificationService {

  public interface Iface {

    /**
     * 用户认证,hub在连接上之后将发送认证请求,返回认证信息
     * @return 用户认证信息
     */
    public AuthInfo userChallenge() throws org.apache.thrift.TException;

    /**
     * 设备连接状态通知
     * @param chipId 使用的芯片id
     * @param deviceId 设备地址
     * @param status 0:断连,1:连接
     * 
     * @param chipId
     * @param deviceId
     * @param status
     */
    public void onConnectionStateChange(String chipId, String deviceId, int status) throws org.apache.thrift.TException;

    /**
     * 扫描结果
     * @param chipId 使用的芯片id
     * @param device 设备信息
     * @param hexScanRecord 广播包数据
     * @param rssi 信号强度
     * 
     * @param chipId
     * @param device
     * @param hexScanRecord
     * @param rssi
     */
    public void onScan(String chipId, Device device, String hexScanRecord, int rssi) throws org.apache.thrift.TException;

    /**
     * 发现服务结果回调
     * @param deviceId 设备地址
     * @param s 所有服务列表
     * 
     * @param deviceId
     * @param s
     */
    public void onServicesDiscovered(String deviceId, List<GattService> s) throws org.apache.thrift.TException;

    /**
     * notification通知数据回调
     * @param deviceId 设备地址
     * @param handle 数据handle号
     * @param hexData 回调的16进制数据
     * 
     * @param deviceId
     * @param handle
     * @param hexData
     */
    public void onNotify(String deviceId, int handle, String hexData) throws org.apache.thrift.TException;

    /**
     * 读取设备handle通知回调
     * @param deviceId 设备地址
     * @param handle 数据handle号
     * @param hexData 回调的16进制数据
     * 
     * @param deviceId
     * @param handle
     * @param hexData
     */
    public void onReadByHandle(String deviceId, int handle, String hexData) throws org.apache.thrift.TException;

    /**
     * 消息通知,主要用于其他错误消息通知
     * @param messageKey 消息类型
     * @param params 消息参数
     * 
     * @param messageKey
     * @param params
     */
    public void onMessage(String messageKey, String params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void userChallenge(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onConnectionStateChange(String chipId, String deviceId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onScan(String chipId, Device device, String hexScanRecord, int rssi, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onServicesDiscovered(String deviceId, List<GattService> s, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onNotify(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onReadByHandle(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void onMessage(String messageKey, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public AuthInfo userChallenge() throws org.apache.thrift.TException
    {
      send_userChallenge();
      return recv_userChallenge();
    }

    public void send_userChallenge() throws org.apache.thrift.TException
    {
      userChallenge_args args = new userChallenge_args();
      sendBase("userChallenge", args);
    }

    public AuthInfo recv_userChallenge() throws org.apache.thrift.TException
    {
      userChallenge_result result = new userChallenge_result();
      receiveBase(result, "userChallenge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "userChallenge failed: unknown result");
    }

    public void onConnectionStateChange(String chipId, String deviceId, int status) throws org.apache.thrift.TException
    {
      send_onConnectionStateChange(chipId, deviceId, status);
      recv_onConnectionStateChange();
    }

    public void send_onConnectionStateChange(String chipId, String deviceId, int status) throws org.apache.thrift.TException
    {
      onConnectionStateChange_args args = new onConnectionStateChange_args();
      args.setChipId(chipId);
      args.setDeviceId(deviceId);
      args.setStatus(status);
      sendBase("onConnectionStateChange", args);
    }

    public void recv_onConnectionStateChange() throws org.apache.thrift.TException
    {
      onConnectionStateChange_result result = new onConnectionStateChange_result();
      receiveBase(result, "onConnectionStateChange");
      return;
    }

    public void onScan(String chipId, Device device, String hexScanRecord, int rssi) throws org.apache.thrift.TException
    {
      send_onScan(chipId, device, hexScanRecord, rssi);
      recv_onScan();
    }

    public void send_onScan(String chipId, Device device, String hexScanRecord, int rssi) throws org.apache.thrift.TException
    {
      onScan_args args = new onScan_args();
      args.setChipId(chipId);
      args.setDevice(device);
      args.setHexScanRecord(hexScanRecord);
      args.setRssi(rssi);
      sendBase("onScan", args);
    }

    public void recv_onScan() throws org.apache.thrift.TException
    {
      onScan_result result = new onScan_result();
      receiveBase(result, "onScan");
      return;
    }

    public void onServicesDiscovered(String deviceId, List<GattService> s) throws org.apache.thrift.TException
    {
      send_onServicesDiscovered(deviceId, s);
      recv_onServicesDiscovered();
    }

    public void send_onServicesDiscovered(String deviceId, List<GattService> s) throws org.apache.thrift.TException
    {
      onServicesDiscovered_args args = new onServicesDiscovered_args();
      args.setDeviceId(deviceId);
      args.setS(s);
      sendBase("onServicesDiscovered", args);
    }

    public void recv_onServicesDiscovered() throws org.apache.thrift.TException
    {
      onServicesDiscovered_result result = new onServicesDiscovered_result();
      receiveBase(result, "onServicesDiscovered");
      return;
    }

    public void onNotify(String deviceId, int handle, String hexData) throws org.apache.thrift.TException
    {
      send_onNotify(deviceId, handle, hexData);
      recv_onNotify();
    }

    public void send_onNotify(String deviceId, int handle, String hexData) throws org.apache.thrift.TException
    {
      onNotify_args args = new onNotify_args();
      args.setDeviceId(deviceId);
      args.setHandle(handle);
      args.setHexData(hexData);
      sendBase("onNotify", args);
    }

    public void recv_onNotify() throws org.apache.thrift.TException
    {
      onNotify_result result = new onNotify_result();
      receiveBase(result, "onNotify");
      return;
    }

    public void onReadByHandle(String deviceId, int handle, String hexData) throws org.apache.thrift.TException
    {
      send_onReadByHandle(deviceId, handle, hexData);
      recv_onReadByHandle();
    }

    public void send_onReadByHandle(String deviceId, int handle, String hexData) throws org.apache.thrift.TException
    {
      onReadByHandle_args args = new onReadByHandle_args();
      args.setDeviceId(deviceId);
      args.setHandle(handle);
      args.setHexData(hexData);
      sendBase("onReadByHandle", args);
    }

    public void recv_onReadByHandle() throws org.apache.thrift.TException
    {
      onReadByHandle_result result = new onReadByHandle_result();
      receiveBase(result, "onReadByHandle");
      return;
    }

    public void onMessage(String messageKey, String params) throws org.apache.thrift.TException
    {
      send_onMessage(messageKey, params);
      recv_onMessage();
    }

    public void send_onMessage(String messageKey, String params) throws org.apache.thrift.TException
    {
      onMessage_args args = new onMessage_args();
      args.setMessageKey(messageKey);
      args.setParams(params);
      sendBase("onMessage", args);
    }

    public void recv_onMessage() throws org.apache.thrift.TException
    {
      onMessage_result result = new onMessage_result();
      receiveBase(result, "onMessage");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void userChallenge(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      userChallenge_call method_call = new userChallenge_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class userChallenge_call extends org.apache.thrift.async.TAsyncMethodCall {
      public userChallenge_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("userChallenge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        userChallenge_args args = new userChallenge_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AuthInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_userChallenge();
      }
    }

    public void onConnectionStateChange(String chipId, String deviceId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onConnectionStateChange_call method_call = new onConnectionStateChange_call(chipId, deviceId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onConnectionStateChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chipId;
      private String deviceId;
      private int status;
      public onConnectionStateChange_call(String chipId, String deviceId, int status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chipId = chipId;
        this.deviceId = deviceId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onConnectionStateChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onConnectionStateChange_args args = new onConnectionStateChange_args();
        args.setChipId(chipId);
        args.setDeviceId(deviceId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onConnectionStateChange();
      }
    }

    public void onScan(String chipId, Device device, String hexScanRecord, int rssi, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onScan_call method_call = new onScan_call(chipId, device, hexScanRecord, rssi, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onScan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String chipId;
      private Device device;
      private String hexScanRecord;
      private int rssi;
      public onScan_call(String chipId, Device device, String hexScanRecord, int rssi, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chipId = chipId;
        this.device = device;
        this.hexScanRecord = hexScanRecord;
        this.rssi = rssi;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onScan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onScan_args args = new onScan_args();
        args.setChipId(chipId);
        args.setDevice(device);
        args.setHexScanRecord(hexScanRecord);
        args.setRssi(rssi);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onScan();
      }
    }

    public void onServicesDiscovered(String deviceId, List<GattService> s, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onServicesDiscovered_call method_call = new onServicesDiscovered_call(deviceId, s, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onServicesDiscovered_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private List<GattService> s;
      public onServicesDiscovered_call(String deviceId, List<GattService> s, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.s = s;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onServicesDiscovered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onServicesDiscovered_args args = new onServicesDiscovered_args();
        args.setDeviceId(deviceId);
        args.setS(s);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onServicesDiscovered();
      }
    }

    public void onNotify(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onNotify_call method_call = new onNotify_call(deviceId, handle, hexData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onNotify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private int handle;
      private String hexData;
      public onNotify_call(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.handle = handle;
        this.hexData = hexData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onNotify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onNotify_args args = new onNotify_args();
        args.setDeviceId(deviceId);
        args.setHandle(handle);
        args.setHexData(hexData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onNotify();
      }
    }

    public void onReadByHandle(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onReadByHandle_call method_call = new onReadByHandle_call(deviceId, handle, hexData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onReadByHandle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private int handle;
      private String hexData;
      public onReadByHandle_call(String deviceId, int handle, String hexData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.handle = handle;
        this.hexData = hexData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onReadByHandle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onReadByHandle_args args = new onReadByHandle_args();
        args.setDeviceId(deviceId);
        args.setHandle(handle);
        args.setHexData(hexData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onReadByHandle();
      }
    }

    public void onMessage(String messageKey, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      onMessage_call method_call = new onMessage_call(messageKey, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class onMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String messageKey;
      private String params;
      public onMessage_call(String messageKey, String params, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageKey = messageKey;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("onMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        onMessage_args args = new onMessage_args();
        args.setMessageKey(messageKey);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_onMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("userChallenge", new userChallenge());
      processMap.put("onConnectionStateChange", new onConnectionStateChange());
      processMap.put("onScan", new onScan());
      processMap.put("onServicesDiscovered", new onServicesDiscovered());
      processMap.put("onNotify", new onNotify());
      processMap.put("onReadByHandle", new onReadByHandle());
      processMap.put("onMessage", new onMessage());
      return processMap;
    }

    public static class userChallenge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, userChallenge_args> {
      public userChallenge() {
        super("userChallenge");
      }

      public userChallenge_args getEmptyArgsInstance() {
        return new userChallenge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public userChallenge_result getResult(I iface, userChallenge_args args) throws org.apache.thrift.TException {
        userChallenge_result result = new userChallenge_result();
        result.success = iface.userChallenge();
        return result;
      }
    }

    public static class onConnectionStateChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onConnectionStateChange_args> {
      public onConnectionStateChange() {
        super("onConnectionStateChange");
      }

      public onConnectionStateChange_args getEmptyArgsInstance() {
        return new onConnectionStateChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onConnectionStateChange_result getResult(I iface, onConnectionStateChange_args args) throws org.apache.thrift.TException {
        onConnectionStateChange_result result = new onConnectionStateChange_result();
        iface.onConnectionStateChange(args.chipId, args.deviceId, args.status);
        return result;
      }
    }

    public static class onScan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onScan_args> {
      public onScan() {
        super("onScan");
      }

      public onScan_args getEmptyArgsInstance() {
        return new onScan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onScan_result getResult(I iface, onScan_args args) throws org.apache.thrift.TException {
        onScan_result result = new onScan_result();
        iface.onScan(args.chipId, args.device, args.hexScanRecord, args.rssi);
        return result;
      }
    }

    public static class onServicesDiscovered<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onServicesDiscovered_args> {
      public onServicesDiscovered() {
        super("onServicesDiscovered");
      }

      public onServicesDiscovered_args getEmptyArgsInstance() {
        return new onServicesDiscovered_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onServicesDiscovered_result getResult(I iface, onServicesDiscovered_args args) throws org.apache.thrift.TException {
        onServicesDiscovered_result result = new onServicesDiscovered_result();
        iface.onServicesDiscovered(args.deviceId, args.s);
        return result;
      }
    }

    public static class onNotify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onNotify_args> {
      public onNotify() {
        super("onNotify");
      }

      public onNotify_args getEmptyArgsInstance() {
        return new onNotify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onNotify_result getResult(I iface, onNotify_args args) throws org.apache.thrift.TException {
        onNotify_result result = new onNotify_result();
        iface.onNotify(args.deviceId, args.handle, args.hexData);
        return result;
      }
    }

    public static class onReadByHandle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onReadByHandle_args> {
      public onReadByHandle() {
        super("onReadByHandle");
      }

      public onReadByHandle_args getEmptyArgsInstance() {
        return new onReadByHandle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onReadByHandle_result getResult(I iface, onReadByHandle_args args) throws org.apache.thrift.TException {
        onReadByHandle_result result = new onReadByHandle_result();
        iface.onReadByHandle(args.deviceId, args.handle, args.hexData);
        return result;
      }
    }

    public static class onMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, onMessage_args> {
      public onMessage() {
        super("onMessage");
      }

      public onMessage_args getEmptyArgsInstance() {
        return new onMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public onMessage_result getResult(I iface, onMessage_args args) throws org.apache.thrift.TException {
        onMessage_result result = new onMessage_result();
        iface.onMessage(args.messageKey, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("userChallenge", new userChallenge());
      processMap.put("onConnectionStateChange", new onConnectionStateChange());
      processMap.put("onScan", new onScan());
      processMap.put("onServicesDiscovered", new onServicesDiscovered());
      processMap.put("onNotify", new onNotify());
      processMap.put("onReadByHandle", new onReadByHandle());
      processMap.put("onMessage", new onMessage());
      return processMap;
    }

    public static class userChallenge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, userChallenge_args, AuthInfo> {
      public userChallenge() {
        super("userChallenge");
      }

      public userChallenge_args getEmptyArgsInstance() {
        return new userChallenge_args();
      }

      public AsyncMethodCallback<AuthInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AuthInfo>() { 
          public void onComplete(AuthInfo o) {
            userChallenge_result result = new userChallenge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            userChallenge_result result = new userChallenge_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, userChallenge_args args, org.apache.thrift.async.AsyncMethodCallback<AuthInfo> resultHandler) throws TException {
        iface.userChallenge(resultHandler);
      }
    }

    public static class onConnectionStateChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onConnectionStateChange_args, Void> {
      public onConnectionStateChange() {
        super("onConnectionStateChange");
      }

      public onConnectionStateChange_args getEmptyArgsInstance() {
        return new onConnectionStateChange_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onConnectionStateChange_result result = new onConnectionStateChange_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onConnectionStateChange_result result = new onConnectionStateChange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onConnectionStateChange_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onConnectionStateChange(args.chipId, args.deviceId, args.status,resultHandler);
      }
    }

    public static class onScan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onScan_args, Void> {
      public onScan() {
        super("onScan");
      }

      public onScan_args getEmptyArgsInstance() {
        return new onScan_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onScan_result result = new onScan_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onScan_result result = new onScan_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onScan_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onScan(args.chipId, args.device, args.hexScanRecord, args.rssi,resultHandler);
      }
    }

    public static class onServicesDiscovered<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onServicesDiscovered_args, Void> {
      public onServicesDiscovered() {
        super("onServicesDiscovered");
      }

      public onServicesDiscovered_args getEmptyArgsInstance() {
        return new onServicesDiscovered_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onServicesDiscovered_result result = new onServicesDiscovered_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onServicesDiscovered_result result = new onServicesDiscovered_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onServicesDiscovered_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onServicesDiscovered(args.deviceId, args.s,resultHandler);
      }
    }

    public static class onNotify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onNotify_args, Void> {
      public onNotify() {
        super("onNotify");
      }

      public onNotify_args getEmptyArgsInstance() {
        return new onNotify_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onNotify_result result = new onNotify_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onNotify_result result = new onNotify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onNotify_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onNotify(args.deviceId, args.handle, args.hexData,resultHandler);
      }
    }

    public static class onReadByHandle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onReadByHandle_args, Void> {
      public onReadByHandle() {
        super("onReadByHandle");
      }

      public onReadByHandle_args getEmptyArgsInstance() {
        return new onReadByHandle_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onReadByHandle_result result = new onReadByHandle_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onReadByHandle_result result = new onReadByHandle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onReadByHandle_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onReadByHandle(args.deviceId, args.handle, args.hexData,resultHandler);
      }
    }

    public static class onMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, onMessage_args, Void> {
      public onMessage() {
        super("onMessage");
      }

      public onMessage_args getEmptyArgsInstance() {
        return new onMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            onMessage_result result = new onMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            onMessage_result result = new onMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, onMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.onMessage(args.messageKey, args.params,resultHandler);
      }
    }

  }

  public static class userChallenge_args implements org.apache.thrift.TBase<userChallenge_args, userChallenge_args._Fields>, java.io.Serializable, Cloneable, Comparable<userChallenge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userChallenge_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userChallenge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userChallenge_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userChallenge_args.class, metaDataMap);
    }

    public userChallenge_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userChallenge_args(userChallenge_args other) {
    }

    public userChallenge_args deepCopy() {
      return new userChallenge_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userChallenge_args)
        return this.equals((userChallenge_args)that);
      return false;
    }

    public boolean equals(userChallenge_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(userChallenge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userChallenge_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userChallenge_argsStandardSchemeFactory implements SchemeFactory {
      public userChallenge_argsStandardScheme getScheme() {
        return new userChallenge_argsStandardScheme();
      }
    }

    private static class userChallenge_argsStandardScheme extends StandardScheme<userChallenge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userChallenge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userChallenge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userChallenge_argsTupleSchemeFactory implements SchemeFactory {
      public userChallenge_argsTupleScheme getScheme() {
        return new userChallenge_argsTupleScheme();
      }
    }

    private static class userChallenge_argsTupleScheme extends TupleScheme<userChallenge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userChallenge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userChallenge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class userChallenge_result implements org.apache.thrift.TBase<userChallenge_result, userChallenge_result._Fields>, java.io.Serializable, Cloneable, Comparable<userChallenge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("userChallenge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new userChallenge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new userChallenge_resultTupleSchemeFactory());
    }

    public AuthInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(userChallenge_result.class, metaDataMap);
    }

    public userChallenge_result() {
    }

    public userChallenge_result(
      AuthInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public userChallenge_result(userChallenge_result other) {
      if (other.isSetSuccess()) {
        this.success = new AuthInfo(other.success);
      }
    }

    public userChallenge_result deepCopy() {
      return new userChallenge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AuthInfo getSuccess() {
      return this.success;
    }

    public userChallenge_result setSuccess(AuthInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AuthInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof userChallenge_result)
        return this.equals((userChallenge_result)that);
      return false;
    }

    public boolean equals(userChallenge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(userChallenge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("userChallenge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class userChallenge_resultStandardSchemeFactory implements SchemeFactory {
      public userChallenge_resultStandardScheme getScheme() {
        return new userChallenge_resultStandardScheme();
      }
    }

    private static class userChallenge_resultStandardScheme extends StandardScheme<userChallenge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, userChallenge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AuthInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, userChallenge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class userChallenge_resultTupleSchemeFactory implements SchemeFactory {
      public userChallenge_resultTupleScheme getScheme() {
        return new userChallenge_resultTupleScheme();
      }
    }

    private static class userChallenge_resultTupleScheme extends TupleScheme<userChallenge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, userChallenge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, userChallenge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AuthInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class onConnectionStateChange_args implements org.apache.thrift.TBase<onConnectionStateChange_args, onConnectionStateChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<onConnectionStateChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onConnectionStateChange_args");

    private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chipId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onConnectionStateChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onConnectionStateChange_argsTupleSchemeFactory());
    }

    public String chipId; // required
    public String deviceId; // required
    public int status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHIP_ID((short)1, "chipId"),
      DEVICE_ID((short)2, "deviceId"),
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHIP_ID
            return CHIP_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ChipId")));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DeviceId")));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onConnectionStateChange_args.class, metaDataMap);
    }

    public onConnectionStateChange_args() {
    }

    public onConnectionStateChange_args(
      String chipId,
      String deviceId,
      int status)
    {
      this();
      this.chipId = chipId;
      this.deviceId = deviceId;
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onConnectionStateChange_args(onConnectionStateChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetChipId()) {
        this.chipId = other.chipId;
      }
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      this.status = other.status;
    }

    public onConnectionStateChange_args deepCopy() {
      return new onConnectionStateChange_args(this);
    }

    @Override
    public void clear() {
      this.chipId = null;
      this.deviceId = null;
      setStatusIsSet(false);
      this.status = 0;
    }

    public String getChipId() {
      return this.chipId;
    }

    public onConnectionStateChange_args setChipId(String chipId) {
      this.chipId = chipId;
      return this;
    }

    public void unsetChipId() {
      this.chipId = null;
    }

    /** Returns true if field chipId is set (has been assigned a value) and false otherwise */
    public boolean isSetChipId() {
      return this.chipId != null;
    }

    public void setChipIdIsSet(boolean value) {
      if (!value) {
        this.chipId = null;
      }
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public onConnectionStateChange_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public onConnectionStateChange_args setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
      return this;
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHIP_ID:
        if (value == null) {
          unsetChipId();
        } else {
          setChipId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHIP_ID:
        return getChipId();

      case DEVICE_ID:
        return getDeviceId();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHIP_ID:
        return isSetChipId();
      case DEVICE_ID:
        return isSetDeviceId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onConnectionStateChange_args)
        return this.equals((onConnectionStateChange_args)that);
      return false;
    }

    public boolean equals(onConnectionStateChange_args that) {
      if (that == null)
        return false;

      boolean this_present_chipId = true && this.isSetChipId();
      boolean that_present_chipId = true && that.isSetChipId();
      if (this_present_chipId || that_present_chipId) {
        if (!(this_present_chipId && that_present_chipId))
          return false;
        if (!this.chipId.equals(that.chipId))
          return false;
      }

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chipId = true && (isSetChipId());
      list.add(present_chipId);
      if (present_chipId)
        list.add(chipId);

      boolean present_deviceId = true && (isSetDeviceId());
      list.add(present_deviceId);
      if (present_deviceId)
        list.add(deviceId);

      boolean present_status = true;
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(onConnectionStateChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChipId()).compareTo(other.isSetChipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipId, other.chipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onConnectionStateChange_args(");
      boolean first = true;

      sb.append("chipId:");
      if (this.chipId == null) {
        sb.append("null");
      } else {
        sb.append(this.chipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onConnectionStateChange_argsStandardSchemeFactory implements SchemeFactory {
      public onConnectionStateChange_argsStandardScheme getScheme() {
        return new onConnectionStateChange_argsStandardScheme();
      }
    }

    private static class onConnectionStateChange_argsStandardScheme extends StandardScheme<onConnectionStateChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onConnectionStateChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chipId = iprot.readString();
                struct.setChipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onConnectionStateChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chipId != null) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chipId);
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onConnectionStateChange_argsTupleSchemeFactory implements SchemeFactory {
      public onConnectionStateChange_argsTupleScheme getScheme() {
        return new onConnectionStateChange_argsTupleScheme();
      }
    }

    private static class onConnectionStateChange_argsTupleScheme extends TupleScheme<onConnectionStateChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onConnectionStateChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChipId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetChipId()) {
          oprot.writeString(struct.chipId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onConnectionStateChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.chipId = iprot.readString();
          struct.setChipIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class onConnectionStateChange_result implements org.apache.thrift.TBase<onConnectionStateChange_result, onConnectionStateChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<onConnectionStateChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onConnectionStateChange_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onConnectionStateChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onConnectionStateChange_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onConnectionStateChange_result.class, metaDataMap);
    }

    public onConnectionStateChange_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onConnectionStateChange_result(onConnectionStateChange_result other) {
    }

    public onConnectionStateChange_result deepCopy() {
      return new onConnectionStateChange_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onConnectionStateChange_result)
        return this.equals((onConnectionStateChange_result)that);
      return false;
    }

    public boolean equals(onConnectionStateChange_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onConnectionStateChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onConnectionStateChange_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onConnectionStateChange_resultStandardSchemeFactory implements SchemeFactory {
      public onConnectionStateChange_resultStandardScheme getScheme() {
        return new onConnectionStateChange_resultStandardScheme();
      }
    }

    private static class onConnectionStateChange_resultStandardScheme extends StandardScheme<onConnectionStateChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onConnectionStateChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onConnectionStateChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onConnectionStateChange_resultTupleSchemeFactory implements SchemeFactory {
      public onConnectionStateChange_resultTupleScheme getScheme() {
        return new onConnectionStateChange_resultTupleScheme();
      }
    }

    private static class onConnectionStateChange_resultTupleScheme extends TupleScheme<onConnectionStateChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onConnectionStateChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onConnectionStateChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onScan_args implements org.apache.thrift.TBase<onScan_args, onScan_args._Fields>, java.io.Serializable, Cloneable, Comparable<onScan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onScan_args");

    private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chipId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField HEX_SCAN_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hexScanRecord", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RSSI_FIELD_DESC = new org.apache.thrift.protocol.TField("rssi", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onScan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onScan_argsTupleSchemeFactory());
    }

    public String chipId; // required
    public Device device; // required
    public String hexScanRecord; // required
    public int rssi; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHIP_ID((short)1, "chipId"),
      DEVICE((short)2, "device"),
      HEX_SCAN_RECORD((short)3, "hexScanRecord"),
      RSSI((short)4, "rssi");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHIP_ID
            return CHIP_ID;
          case 2: // DEVICE
            return DEVICE;
          case 3: // HEX_SCAN_RECORD
            return HEX_SCAN_RECORD;
          case 4: // RSSI
            return RSSI;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RSSI_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "ChipId")));
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Device.class)));
      tmpMap.put(_Fields.HEX_SCAN_RECORD, new org.apache.thrift.meta_data.FieldMetaData("hexScanRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RSSI, new org.apache.thrift.meta_data.FieldMetaData("rssi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onScan_args.class, metaDataMap);
    }

    public onScan_args() {
    }

    public onScan_args(
      String chipId,
      Device device,
      String hexScanRecord,
      int rssi)
    {
      this();
      this.chipId = chipId;
      this.device = device;
      this.hexScanRecord = hexScanRecord;
      this.rssi = rssi;
      setRssiIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onScan_args(onScan_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetChipId()) {
        this.chipId = other.chipId;
      }
      if (other.isSetDevice()) {
        this.device = new Device(other.device);
      }
      if (other.isSetHexScanRecord()) {
        this.hexScanRecord = other.hexScanRecord;
      }
      this.rssi = other.rssi;
    }

    public onScan_args deepCopy() {
      return new onScan_args(this);
    }

    @Override
    public void clear() {
      this.chipId = null;
      this.device = null;
      this.hexScanRecord = null;
      setRssiIsSet(false);
      this.rssi = 0;
    }

    public String getChipId() {
      return this.chipId;
    }

    public onScan_args setChipId(String chipId) {
      this.chipId = chipId;
      return this;
    }

    public void unsetChipId() {
      this.chipId = null;
    }

    /** Returns true if field chipId is set (has been assigned a value) and false otherwise */
    public boolean isSetChipId() {
      return this.chipId != null;
    }

    public void setChipIdIsSet(boolean value) {
      if (!value) {
        this.chipId = null;
      }
    }

    public Device getDevice() {
      return this.device;
    }

    public onScan_args setDevice(Device device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public String getHexScanRecord() {
      return this.hexScanRecord;
    }

    public onScan_args setHexScanRecord(String hexScanRecord) {
      this.hexScanRecord = hexScanRecord;
      return this;
    }

    public void unsetHexScanRecord() {
      this.hexScanRecord = null;
    }

    /** Returns true if field hexScanRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetHexScanRecord() {
      return this.hexScanRecord != null;
    }

    public void setHexScanRecordIsSet(boolean value) {
      if (!value) {
        this.hexScanRecord = null;
      }
    }

    public int getRssi() {
      return this.rssi;
    }

    public onScan_args setRssi(int rssi) {
      this.rssi = rssi;
      setRssiIsSet(true);
      return this;
    }

    public void unsetRssi() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RSSI_ISSET_ID);
    }

    /** Returns true if field rssi is set (has been assigned a value) and false otherwise */
    public boolean isSetRssi() {
      return EncodingUtils.testBit(__isset_bitfield, __RSSI_ISSET_ID);
    }

    public void setRssiIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RSSI_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHIP_ID:
        if (value == null) {
          unsetChipId();
        } else {
          setChipId((String)value);
        }
        break;

      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((Device)value);
        }
        break;

      case HEX_SCAN_RECORD:
        if (value == null) {
          unsetHexScanRecord();
        } else {
          setHexScanRecord((String)value);
        }
        break;

      case RSSI:
        if (value == null) {
          unsetRssi();
        } else {
          setRssi((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHIP_ID:
        return getChipId();

      case DEVICE:
        return getDevice();

      case HEX_SCAN_RECORD:
        return getHexScanRecord();

      case RSSI:
        return getRssi();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHIP_ID:
        return isSetChipId();
      case DEVICE:
        return isSetDevice();
      case HEX_SCAN_RECORD:
        return isSetHexScanRecord();
      case RSSI:
        return isSetRssi();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onScan_args)
        return this.equals((onScan_args)that);
      return false;
    }

    public boolean equals(onScan_args that) {
      if (that == null)
        return false;

      boolean this_present_chipId = true && this.isSetChipId();
      boolean that_present_chipId = true && that.isSetChipId();
      if (this_present_chipId || that_present_chipId) {
        if (!(this_present_chipId && that_present_chipId))
          return false;
        if (!this.chipId.equals(that.chipId))
          return false;
      }

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      boolean this_present_hexScanRecord = true && this.isSetHexScanRecord();
      boolean that_present_hexScanRecord = true && that.isSetHexScanRecord();
      if (this_present_hexScanRecord || that_present_hexScanRecord) {
        if (!(this_present_hexScanRecord && that_present_hexScanRecord))
          return false;
        if (!this.hexScanRecord.equals(that.hexScanRecord))
          return false;
      }

      boolean this_present_rssi = true;
      boolean that_present_rssi = true;
      if (this_present_rssi || that_present_rssi) {
        if (!(this_present_rssi && that_present_rssi))
          return false;
        if (this.rssi != that.rssi)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_chipId = true && (isSetChipId());
      list.add(present_chipId);
      if (present_chipId)
        list.add(chipId);

      boolean present_device = true && (isSetDevice());
      list.add(present_device);
      if (present_device)
        list.add(device);

      boolean present_hexScanRecord = true && (isSetHexScanRecord());
      list.add(present_hexScanRecord);
      if (present_hexScanRecord)
        list.add(hexScanRecord);

      boolean present_rssi = true;
      list.add(present_rssi);
      if (present_rssi)
        list.add(rssi);

      return list.hashCode();
    }

    @Override
    public int compareTo(onScan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChipId()).compareTo(other.isSetChipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipId, other.chipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHexScanRecord()).compareTo(other.isSetHexScanRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHexScanRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hexScanRecord, other.hexScanRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRssi()).compareTo(other.isSetRssi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRssi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rssi, other.rssi);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onScan_args(");
      boolean first = true;

      sb.append("chipId:");
      if (this.chipId == null) {
        sb.append("null");
      } else {
        sb.append(this.chipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hexScanRecord:");
      if (this.hexScanRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.hexScanRecord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rssi:");
      sb.append(this.rssi);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (device != null) {
        device.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onScan_argsStandardSchemeFactory implements SchemeFactory {
      public onScan_argsStandardScheme getScheme() {
        return new onScan_argsStandardScheme();
      }
    }

    private static class onScan_argsStandardScheme extends StandardScheme<onScan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onScan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chipId = iprot.readString();
                struct.setChipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new Device();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEX_SCAN_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hexScanRecord = iprot.readString();
                struct.setHexScanRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RSSI
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rssi = iprot.readI32();
                struct.setRssiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onScan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chipId != null) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chipId);
          oprot.writeFieldEnd();
        }
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hexScanRecord != null) {
          oprot.writeFieldBegin(HEX_SCAN_RECORD_FIELD_DESC);
          oprot.writeString(struct.hexScanRecord);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RSSI_FIELD_DESC);
        oprot.writeI32(struct.rssi);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onScan_argsTupleSchemeFactory implements SchemeFactory {
      public onScan_argsTupleScheme getScheme() {
        return new onScan_argsTupleScheme();
      }
    }

    private static class onScan_argsTupleScheme extends TupleScheme<onScan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onScan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChipId()) {
          optionals.set(0);
        }
        if (struct.isSetDevice()) {
          optionals.set(1);
        }
        if (struct.isSetHexScanRecord()) {
          optionals.set(2);
        }
        if (struct.isSetRssi()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChipId()) {
          oprot.writeString(struct.chipId);
        }
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
        if (struct.isSetHexScanRecord()) {
          oprot.writeString(struct.hexScanRecord);
        }
        if (struct.isSetRssi()) {
          oprot.writeI32(struct.rssi);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onScan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.chipId = iprot.readString();
          struct.setChipIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.device = new Device();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hexScanRecord = iprot.readString();
          struct.setHexScanRecordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rssi = iprot.readI32();
          struct.setRssiIsSet(true);
        }
      }
    }

  }

  public static class onScan_result implements org.apache.thrift.TBase<onScan_result, onScan_result._Fields>, java.io.Serializable, Cloneable, Comparable<onScan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onScan_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onScan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onScan_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onScan_result.class, metaDataMap);
    }

    public onScan_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onScan_result(onScan_result other) {
    }

    public onScan_result deepCopy() {
      return new onScan_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onScan_result)
        return this.equals((onScan_result)that);
      return false;
    }

    public boolean equals(onScan_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onScan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onScan_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onScan_resultStandardSchemeFactory implements SchemeFactory {
      public onScan_resultStandardScheme getScheme() {
        return new onScan_resultStandardScheme();
      }
    }

    private static class onScan_resultStandardScheme extends StandardScheme<onScan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onScan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onScan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onScan_resultTupleSchemeFactory implements SchemeFactory {
      public onScan_resultTupleScheme getScheme() {
        return new onScan_resultTupleScheme();
      }
    }

    private static class onScan_resultTupleScheme extends TupleScheme<onScan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onScan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onScan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onServicesDiscovered_args implements org.apache.thrift.TBase<onServicesDiscovered_args, onServicesDiscovered_args._Fields>, java.io.Serializable, Cloneable, Comparable<onServicesDiscovered_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onServicesDiscovered_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onServicesDiscovered_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onServicesDiscovered_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public List<GattService> s; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      S((short)2, "s");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // S
            return S;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DeviceId")));
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GattService.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onServicesDiscovered_args.class, metaDataMap);
    }

    public onServicesDiscovered_args() {
    }

    public onServicesDiscovered_args(
      String deviceId,
      List<GattService> s)
    {
      this();
      this.deviceId = deviceId;
      this.s = s;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onServicesDiscovered_args(onServicesDiscovered_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetS()) {
        List<GattService> __this__s = new ArrayList<GattService>(other.s.size());
        for (GattService other_element : other.s) {
          __this__s.add(new GattService(other_element));
        }
        this.s = __this__s;
      }
    }

    public onServicesDiscovered_args deepCopy() {
      return new onServicesDiscovered_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.s = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public onServicesDiscovered_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public int getSSize() {
      return (this.s == null) ? 0 : this.s.size();
    }

    public java.util.Iterator<GattService> getSIterator() {
      return (this.s == null) ? null : this.s.iterator();
    }

    public void addToS(GattService elem) {
      if (this.s == null) {
        this.s = new ArrayList<GattService>();
      }
      this.s.add(elem);
    }

    public List<GattService> getS() {
      return this.s;
    }

    public onServicesDiscovered_args setS(List<GattService> s) {
      this.s = s;
      return this;
    }

    public void unsetS() {
      this.s = null;
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return this.s != null;
    }

    public void setSIsSet(boolean value) {
      if (!value) {
        this.s = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((List<GattService>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case S:
        return getS();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case S:
        return isSetS();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onServicesDiscovered_args)
        return this.equals((onServicesDiscovered_args)that);
      return false;
    }

    public boolean equals(onServicesDiscovered_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_s = true && this.isSetS();
      boolean that_present_s = true && that.isSetS();
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (!this.s.equals(that.s))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceId = true && (isSetDeviceId());
      list.add(present_deviceId);
      if (present_deviceId)
        list.add(deviceId);

      boolean present_s = true && (isSetS());
      list.add(present_s);
      if (present_s)
        list.add(s);

      return list.hashCode();
    }

    @Override
    public int compareTo(onServicesDiscovered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onServicesDiscovered_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s:");
      if (this.s == null) {
        sb.append("null");
      } else {
        sb.append(this.s);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onServicesDiscovered_argsStandardSchemeFactory implements SchemeFactory {
      public onServicesDiscovered_argsStandardScheme getScheme() {
        return new onServicesDiscovered_argsStandardScheme();
      }
    }

    private static class onServicesDiscovered_argsStandardScheme extends StandardScheme<onServicesDiscovered_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onServicesDiscovered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.s = new ArrayList<GattService>(_list24.size);
                  GattService _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new GattService();
                    _elem25.read(iprot);
                    struct.s.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onServicesDiscovered_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.s != null) {
          oprot.writeFieldBegin(S_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.s.size()));
            for (GattService _iter27 : struct.s)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onServicesDiscovered_argsTupleSchemeFactory implements SchemeFactory {
      public onServicesDiscovered_argsTupleScheme getScheme() {
        return new onServicesDiscovered_argsTupleScheme();
      }
    }

    private static class onServicesDiscovered_argsTupleScheme extends TupleScheme<onServicesDiscovered_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onServicesDiscovered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetS()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetS()) {
          {
            oprot.writeI32(struct.s.size());
            for (GattService _iter28 : struct.s)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onServicesDiscovered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.s = new ArrayList<GattService>(_list29.size);
            GattService _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new GattService();
              _elem30.read(iprot);
              struct.s.add(_elem30);
            }
          }
          struct.setSIsSet(true);
        }
      }
    }

  }

  public static class onServicesDiscovered_result implements org.apache.thrift.TBase<onServicesDiscovered_result, onServicesDiscovered_result._Fields>, java.io.Serializable, Cloneable, Comparable<onServicesDiscovered_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onServicesDiscovered_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onServicesDiscovered_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onServicesDiscovered_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onServicesDiscovered_result.class, metaDataMap);
    }

    public onServicesDiscovered_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onServicesDiscovered_result(onServicesDiscovered_result other) {
    }

    public onServicesDiscovered_result deepCopy() {
      return new onServicesDiscovered_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onServicesDiscovered_result)
        return this.equals((onServicesDiscovered_result)that);
      return false;
    }

    public boolean equals(onServicesDiscovered_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onServicesDiscovered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onServicesDiscovered_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onServicesDiscovered_resultStandardSchemeFactory implements SchemeFactory {
      public onServicesDiscovered_resultStandardScheme getScheme() {
        return new onServicesDiscovered_resultStandardScheme();
      }
    }

    private static class onServicesDiscovered_resultStandardScheme extends StandardScheme<onServicesDiscovered_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onServicesDiscovered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onServicesDiscovered_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onServicesDiscovered_resultTupleSchemeFactory implements SchemeFactory {
      public onServicesDiscovered_resultTupleScheme getScheme() {
        return new onServicesDiscovered_resultTupleScheme();
      }
    }

    private static class onServicesDiscovered_resultTupleScheme extends TupleScheme<onServicesDiscovered_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onServicesDiscovered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onServicesDiscovered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onNotify_args implements org.apache.thrift.TBase<onNotify_args, onNotify_args._Fields>, java.io.Serializable, Cloneable, Comparable<onNotify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onNotify_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HEX_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("hexData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onNotify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onNotify_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public int handle; // required
    public String hexData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      HANDLE((short)2, "handle"),
      HEX_DATA((short)3, "hexData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // HANDLE
            return HANDLE;
          case 3: // HEX_DATA
            return HEX_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DeviceId")));
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEX_DATA, new org.apache.thrift.meta_data.FieldMetaData("hexData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onNotify_args.class, metaDataMap);
    }

    public onNotify_args() {
    }

    public onNotify_args(
      String deviceId,
      int handle,
      String hexData)
    {
      this();
      this.deviceId = deviceId;
      this.handle = handle;
      setHandleIsSet(true);
      this.hexData = hexData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onNotify_args(onNotify_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      this.handle = other.handle;
      if (other.isSetHexData()) {
        this.hexData = other.hexData;
      }
    }

    public onNotify_args deepCopy() {
      return new onNotify_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      setHandleIsSet(false);
      this.handle = 0;
      this.hexData = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public onNotify_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public int getHandle() {
      return this.handle;
    }

    public onNotify_args setHandle(int handle) {
      this.handle = handle;
      setHandleIsSet(true);
      return this;
    }

    public void unsetHandle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLE_ISSET_ID);
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLE_ISSET_ID);
    }

    public void setHandleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLE_ISSET_ID, value);
    }

    public String getHexData() {
      return this.hexData;
    }

    public onNotify_args setHexData(String hexData) {
      this.hexData = hexData;
      return this;
    }

    public void unsetHexData() {
      this.hexData = null;
    }

    /** Returns true if field hexData is set (has been assigned a value) and false otherwise */
    public boolean isSetHexData() {
      return this.hexData != null;
    }

    public void setHexDataIsSet(boolean value) {
      if (!value) {
        this.hexData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((Integer)value);
        }
        break;

      case HEX_DATA:
        if (value == null) {
          unsetHexData();
        } else {
          setHexData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case HANDLE:
        return getHandle();

      case HEX_DATA:
        return getHexData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case HANDLE:
        return isSetHandle();
      case HEX_DATA:
        return isSetHexData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onNotify_args)
        return this.equals((onNotify_args)that);
      return false;
    }

    public boolean equals(onNotify_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_handle = true;
      boolean that_present_handle = true;
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (this.handle != that.handle)
          return false;
      }

      boolean this_present_hexData = true && this.isSetHexData();
      boolean that_present_hexData = true && that.isSetHexData();
      if (this_present_hexData || that_present_hexData) {
        if (!(this_present_hexData && that_present_hexData))
          return false;
        if (!this.hexData.equals(that.hexData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceId = true && (isSetDeviceId());
      list.add(present_deviceId);
      if (present_deviceId)
        list.add(deviceId);

      boolean present_handle = true;
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_hexData = true && (isSetHexData());
      list.add(present_hexData);
      if (present_hexData)
        list.add(hexData);

      return list.hashCode();
    }

    @Override
    public int compareTo(onNotify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHexData()).compareTo(other.isSetHexData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHexData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hexData, other.hexData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onNotify_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handle:");
      sb.append(this.handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hexData:");
      if (this.hexData == null) {
        sb.append("null");
      } else {
        sb.append(this.hexData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onNotify_argsStandardSchemeFactory implements SchemeFactory {
      public onNotify_argsStandardScheme getScheme() {
        return new onNotify_argsStandardScheme();
      }
    }

    private static class onNotify_argsStandardScheme extends StandardScheme<onNotify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onNotify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handle = iprot.readI32();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEX_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hexData = iprot.readString();
                struct.setHexDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onNotify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HANDLE_FIELD_DESC);
        oprot.writeI32(struct.handle);
        oprot.writeFieldEnd();
        if (struct.hexData != null) {
          oprot.writeFieldBegin(HEX_DATA_FIELD_DESC);
          oprot.writeString(struct.hexData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onNotify_argsTupleSchemeFactory implements SchemeFactory {
      public onNotify_argsTupleScheme getScheme() {
        return new onNotify_argsTupleScheme();
      }
    }

    private static class onNotify_argsTupleScheme extends TupleScheme<onNotify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onNotify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetHandle()) {
          optionals.set(1);
        }
        if (struct.isSetHexData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetHandle()) {
          oprot.writeI32(struct.handle);
        }
        if (struct.isSetHexData()) {
          oprot.writeString(struct.hexData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onNotify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handle = iprot.readI32();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hexData = iprot.readString();
          struct.setHexDataIsSet(true);
        }
      }
    }

  }

  public static class onNotify_result implements org.apache.thrift.TBase<onNotify_result, onNotify_result._Fields>, java.io.Serializable, Cloneable, Comparable<onNotify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onNotify_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onNotify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onNotify_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onNotify_result.class, metaDataMap);
    }

    public onNotify_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onNotify_result(onNotify_result other) {
    }

    public onNotify_result deepCopy() {
      return new onNotify_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onNotify_result)
        return this.equals((onNotify_result)that);
      return false;
    }

    public boolean equals(onNotify_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onNotify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onNotify_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onNotify_resultStandardSchemeFactory implements SchemeFactory {
      public onNotify_resultStandardScheme getScheme() {
        return new onNotify_resultStandardScheme();
      }
    }

    private static class onNotify_resultStandardScheme extends StandardScheme<onNotify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onNotify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onNotify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onNotify_resultTupleSchemeFactory implements SchemeFactory {
      public onNotify_resultTupleScheme getScheme() {
        return new onNotify_resultTupleScheme();
      }
    }

    private static class onNotify_resultTupleScheme extends TupleScheme<onNotify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onNotify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onNotify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onReadByHandle_args implements org.apache.thrift.TBase<onReadByHandle_args, onReadByHandle_args._Fields>, java.io.Serializable, Cloneable, Comparable<onReadByHandle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onReadByHandle_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("handle", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HEX_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("hexData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onReadByHandle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onReadByHandle_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public int handle; // required
    public String hexData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      HANDLE((short)2, "handle"),
      HEX_DATA((short)3, "hexData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // HANDLE
            return HANDLE;
          case 3: // HEX_DATA
            return HEX_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HANDLE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "DeviceId")));
      tmpMap.put(_Fields.HANDLE, new org.apache.thrift.meta_data.FieldMetaData("handle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEX_DATA, new org.apache.thrift.meta_data.FieldMetaData("hexData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onReadByHandle_args.class, metaDataMap);
    }

    public onReadByHandle_args() {
    }

    public onReadByHandle_args(
      String deviceId,
      int handle,
      String hexData)
    {
      this();
      this.deviceId = deviceId;
      this.handle = handle;
      setHandleIsSet(true);
      this.hexData = hexData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onReadByHandle_args(onReadByHandle_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      this.handle = other.handle;
      if (other.isSetHexData()) {
        this.hexData = other.hexData;
      }
    }

    public onReadByHandle_args deepCopy() {
      return new onReadByHandle_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      setHandleIsSet(false);
      this.handle = 0;
      this.hexData = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public onReadByHandle_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public int getHandle() {
      return this.handle;
    }

    public onReadByHandle_args setHandle(int handle) {
      this.handle = handle;
      setHandleIsSet(true);
      return this;
    }

    public void unsetHandle() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLE_ISSET_ID);
    }

    /** Returns true if field handle is set (has been assigned a value) and false otherwise */
    public boolean isSetHandle() {
      return EncodingUtils.testBit(__isset_bitfield, __HANDLE_ISSET_ID);
    }

    public void setHandleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLE_ISSET_ID, value);
    }

    public String getHexData() {
      return this.hexData;
    }

    public onReadByHandle_args setHexData(String hexData) {
      this.hexData = hexData;
      return this;
    }

    public void unsetHexData() {
      this.hexData = null;
    }

    /** Returns true if field hexData is set (has been assigned a value) and false otherwise */
    public boolean isSetHexData() {
      return this.hexData != null;
    }

    public void setHexDataIsSet(boolean value) {
      if (!value) {
        this.hexData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case HANDLE:
        if (value == null) {
          unsetHandle();
        } else {
          setHandle((Integer)value);
        }
        break;

      case HEX_DATA:
        if (value == null) {
          unsetHexData();
        } else {
          setHexData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case HANDLE:
        return getHandle();

      case HEX_DATA:
        return getHexData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case HANDLE:
        return isSetHandle();
      case HEX_DATA:
        return isSetHexData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onReadByHandle_args)
        return this.equals((onReadByHandle_args)that);
      return false;
    }

    public boolean equals(onReadByHandle_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_handle = true;
      boolean that_present_handle = true;
      if (this_present_handle || that_present_handle) {
        if (!(this_present_handle && that_present_handle))
          return false;
        if (this.handle != that.handle)
          return false;
      }

      boolean this_present_hexData = true && this.isSetHexData();
      boolean that_present_hexData = true && that.isSetHexData();
      if (this_present_hexData || that_present_hexData) {
        if (!(this_present_hexData && that_present_hexData))
          return false;
        if (!this.hexData.equals(that.hexData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deviceId = true && (isSetDeviceId());
      list.add(present_deviceId);
      if (present_deviceId)
        list.add(deviceId);

      boolean present_handle = true;
      list.add(present_handle);
      if (present_handle)
        list.add(handle);

      boolean present_hexData = true && (isSetHexData());
      list.add(present_hexData);
      if (present_hexData)
        list.add(hexData);

      return list.hashCode();
    }

    @Override
    public int compareTo(onReadByHandle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(other.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, other.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHandle()).compareTo(other.isSetHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handle, other.handle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHexData()).compareTo(other.isSetHexData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHexData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hexData, other.hexData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onReadByHandle_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handle:");
      sb.append(this.handle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hexData:");
      if (this.hexData == null) {
        sb.append("null");
      } else {
        sb.append(this.hexData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onReadByHandle_argsStandardSchemeFactory implements SchemeFactory {
      public onReadByHandle_argsStandardScheme getScheme() {
        return new onReadByHandle_argsStandardScheme();
      }
    }

    private static class onReadByHandle_argsStandardScheme extends StandardScheme<onReadByHandle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onReadByHandle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handle = iprot.readI32();
                struct.setHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEX_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hexData = iprot.readString();
                struct.setHexDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onReadByHandle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(HANDLE_FIELD_DESC);
        oprot.writeI32(struct.handle);
        oprot.writeFieldEnd();
        if (struct.hexData != null) {
          oprot.writeFieldBegin(HEX_DATA_FIELD_DESC);
          oprot.writeString(struct.hexData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onReadByHandle_argsTupleSchemeFactory implements SchemeFactory {
      public onReadByHandle_argsTupleScheme getScheme() {
        return new onReadByHandle_argsTupleScheme();
      }
    }

    private static class onReadByHandle_argsTupleScheme extends TupleScheme<onReadByHandle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onReadByHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetHandle()) {
          optionals.set(1);
        }
        if (struct.isSetHexData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetHandle()) {
          oprot.writeI32(struct.handle);
        }
        if (struct.isSetHexData()) {
          oprot.writeString(struct.hexData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onReadByHandle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handle = iprot.readI32();
          struct.setHandleIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hexData = iprot.readString();
          struct.setHexDataIsSet(true);
        }
      }
    }

  }

  public static class onReadByHandle_result implements org.apache.thrift.TBase<onReadByHandle_result, onReadByHandle_result._Fields>, java.io.Serializable, Cloneable, Comparable<onReadByHandle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onReadByHandle_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onReadByHandle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onReadByHandle_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onReadByHandle_result.class, metaDataMap);
    }

    public onReadByHandle_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onReadByHandle_result(onReadByHandle_result other) {
    }

    public onReadByHandle_result deepCopy() {
      return new onReadByHandle_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onReadByHandle_result)
        return this.equals((onReadByHandle_result)that);
      return false;
    }

    public boolean equals(onReadByHandle_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onReadByHandle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onReadByHandle_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onReadByHandle_resultStandardSchemeFactory implements SchemeFactory {
      public onReadByHandle_resultStandardScheme getScheme() {
        return new onReadByHandle_resultStandardScheme();
      }
    }

    private static class onReadByHandle_resultStandardScheme extends StandardScheme<onReadByHandle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onReadByHandle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onReadByHandle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onReadByHandle_resultTupleSchemeFactory implements SchemeFactory {
      public onReadByHandle_resultTupleScheme getScheme() {
        return new onReadByHandle_resultTupleScheme();
      }
    }

    private static class onReadByHandle_resultTupleScheme extends TupleScheme<onReadByHandle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onReadByHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onReadByHandle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class onMessage_args implements org.apache.thrift.TBase<onMessage_args, onMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<onMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onMessage_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("messageKey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onMessage_argsTupleSchemeFactory());
    }

    public String messageKey; // required
    public String params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_KEY((short)1, "messageKey"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_KEY
            return MESSAGE_KEY;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_KEY, new org.apache.thrift.meta_data.FieldMetaData("messageKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onMessage_args.class, metaDataMap);
    }

    public onMessage_args() {
    }

    public onMessage_args(
      String messageKey,
      String params)
    {
      this();
      this.messageKey = messageKey;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onMessage_args(onMessage_args other) {
      if (other.isSetMessageKey()) {
        this.messageKey = other.messageKey;
      }
      if (other.isSetParams()) {
        this.params = other.params;
      }
    }

    public onMessage_args deepCopy() {
      return new onMessage_args(this);
    }

    @Override
    public void clear() {
      this.messageKey = null;
      this.params = null;
    }

    public String getMessageKey() {
      return this.messageKey;
    }

    public onMessage_args setMessageKey(String messageKey) {
      this.messageKey = messageKey;
      return this;
    }

    public void unsetMessageKey() {
      this.messageKey = null;
    }

    /** Returns true if field messageKey is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageKey() {
      return this.messageKey != null;
    }

    public void setMessageKeyIsSet(boolean value) {
      if (!value) {
        this.messageKey = null;
      }
    }

    public String getParams() {
      return this.params;
    }

    public onMessage_args setParams(String params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_KEY:
        if (value == null) {
          unsetMessageKey();
        } else {
          setMessageKey((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_KEY:
        return getMessageKey();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_KEY:
        return isSetMessageKey();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onMessage_args)
        return this.equals((onMessage_args)that);
      return false;
    }

    public boolean equals(onMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_messageKey = true && this.isSetMessageKey();
      boolean that_present_messageKey = true && that.isSetMessageKey();
      if (this_present_messageKey || that_present_messageKey) {
        if (!(this_present_messageKey && that_present_messageKey))
          return false;
        if (!this.messageKey.equals(that.messageKey))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_messageKey = true && (isSetMessageKey());
      list.add(present_messageKey);
      if (present_messageKey)
        list.add(messageKey);

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      return list.hashCode();
    }

    @Override
    public int compareTo(onMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageKey()).compareTo(other.isSetMessageKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageKey, other.messageKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onMessage_args(");
      boolean first = true;

      sb.append("messageKey:");
      if (this.messageKey == null) {
        sb.append("null");
      } else {
        sb.append(this.messageKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onMessage_argsStandardSchemeFactory implements SchemeFactory {
      public onMessage_argsStandardScheme getScheme() {
        return new onMessage_argsStandardScheme();
      }
    }

    private static class onMessage_argsStandardScheme extends StandardScheme<onMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.messageKey = iprot.readString();
                struct.setMessageKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readString();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messageKey != null) {
          oprot.writeFieldBegin(MESSAGE_KEY_FIELD_DESC);
          oprot.writeString(struct.messageKey);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onMessage_argsTupleSchemeFactory implements SchemeFactory {
      public onMessage_argsTupleScheme getScheme() {
        return new onMessage_argsTupleScheme();
      }
    }

    private static class onMessage_argsTupleScheme extends TupleScheme<onMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageKey()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessageKey()) {
          oprot.writeString(struct.messageKey);
        }
        if (struct.isSetParams()) {
          oprot.writeString(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.messageKey = iprot.readString();
          struct.setMessageKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.params = iprot.readString();
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class onMessage_result implements org.apache.thrift.TBase<onMessage_result, onMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<onMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("onMessage_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new onMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new onMessage_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(onMessage_result.class, metaDataMap);
    }

    public onMessage_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public onMessage_result(onMessage_result other) {
    }

    public onMessage_result deepCopy() {
      return new onMessage_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof onMessage_result)
        return this.equals((onMessage_result)that);
      return false;
    }

    public boolean equals(onMessage_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(onMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("onMessage_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class onMessage_resultStandardSchemeFactory implements SchemeFactory {
      public onMessage_resultStandardScheme getScheme() {
        return new onMessage_resultStandardScheme();
      }
    }

    private static class onMessage_resultStandardScheme extends StandardScheme<onMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, onMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, onMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class onMessage_resultTupleSchemeFactory implements SchemeFactory {
      public onMessage_resultTupleScheme getScheme() {
        return new onMessage_resultTupleScheme();
      }
    }

    private static class onMessage_resultTupleScheme extends TupleScheme<onMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, onMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, onMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
